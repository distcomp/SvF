Runmode = 'P&S'
SvF.DrawMode = 'File' #'File&Screen'
SvF.Resources = ["shark1vvv"]

CVNumOfIter  = 2			# максимальное кол-во итераций поиска весов регуляризации
CVstep       = 21  			# кол-во подмножеств для процедуры кросс-валидации

Select 	t, x  from  Spring5.dat      # считывание данных

SET:	t = [     ,    , 0.025] 	# область определения функции x(t)
#	X = [ -0.1, 2.2, 0.1  ] 	# область значений (с запасом) функции x(t)
 #	V = [ -1,   1.5, 0.1  ]		# область значений (с запасом) функции v(t)
	X = [ -0.1, 2.3, 0.3  ] 	# область значений (с запасом) функции x(t)
 	V = [ -1,   1.5, 0.3  ]		# область значений (с запасом) функции v(t)

VAR:    x ( t )   			# искомая функция
	v ( t )			 	# искомая функция
	f ( X, V );   VarType = SPWLi     # вместо Degree = 6	сглаженная кусчно-линейная линия
#SvF.Epsilon =0.000001

EQ:     v == d/dt(x)			# дифференциальное ур-ие 1-ого порядка
EQ:	d2/dt2(x) ==  f(x,v)		# дифференциальное ур-ие 2-ого порядка

OBJ:   f.Complexity(Penal[0], Penal[1])/x.V.sigma2 + x.MSD()  # критерий выбора x(t),v(t) и f(x,t)
  
Draw   x				# отображение функции x(t)

:Pl = Polyline (x, v, None, 'Trajectory')
Pl.Y[0]  = Pl.Y[1]			# прячем 0-ую точку
Pl.Y[-1] = Pl.Y[-2]			# прячем последнюю точку

Draw f Trajectory;LC:red		# отображение функции f(x,t) и траектории решения

EOF



