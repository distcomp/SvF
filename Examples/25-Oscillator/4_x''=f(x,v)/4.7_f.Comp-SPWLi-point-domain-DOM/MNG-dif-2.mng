CVNumOfIter  = 0			# максимальное кол-во итераций поиска весов регуляризации
runMode = 'P&P'
##############################    В пространстве x,v по старому решению создаем область определения
#				 функции f ( x,v ), в которой будем аппроксимировать её индикаторными? функциями 
TabX = Select * from  x(t).sol
TabV = Select * from  v(t).sol
Set: 	V1 = [ -1,   1.8, 0.1  ]; Data = TabV.v;	# область значений (с запасом) функции v(t)
	X1 = [ -0.1, 2.3, 0.1  ]; Data = TabX.x; 	# область значений (с запасом) функции x(t)
Domain: X1V1 = (X1,V1,-3,-3)
#Domain: X1V1 = (X1,V1,1.4,1.4)

TabD = Select 	t, x  from  Spring5.dat      # считывание данных
Set:	t = [     ,    , 0.025] 	# область определения функции x(t)
	X = [ -0.1, 2.2, 0.1  ]; Data = TabD.x; Index='i' 	# Data = 'x'  область значений (с запасом) функции x(t)
 	V = [ -1,   1.8, 0.1  ]; 	# область значений (с запасом) функции v(t)

VAR:    x ( t )   			# искомая функция
	v ( t )			 	# искомая функция
	f ( X, V );   Type = SPWLi; # X,V ∈ X1V1    # вместо Degree = 6	сглаженная кусчно-линейная линия
#	f ( X, V );   Degree = 6;  X,V ∈ X1V1    # вместо Degree = 6	сглаженная кусчно-линейная линия

f.domain_SPWL = X1V1.domain             # Подключаем мотрицу X1V1.domain к соответствующей переменной функции f   
#SvF.Epsilon =0.000001

EQ:     v == d/dt(x)			# дифференциальное ур-ие 1-ого порядка
EQ:	d2/dt2(x) ==  f(x,v)		# дифференциальное ур-ие 2-ого порядка

CV:     CV_NumSets=21			# кол-во подмножеств для процедуры кросс-валидации
OBJ:   f.Complexity(Penal[0], Penal[1])/x.V.sigma2 + x.MSD()  # критерий выбора x(t),v(t) и f(x,t)
  
Draw   x				# отображение функции x(t)

:Pl = Polyline (x, v, None, 'Trajectory')
Pl.Y[0]  = Pl.Y[1]			# прячем 0-ую точку
Pl.Y[-1] = Pl.Y[-2]			# прячем последнюю точку

Draw f Trajectory;LC:red		# отображение функции f(x,t) и траектории решения
f.domain = f.domain_SPWL  
Draw f Trajectory;LC:red		# отображение функции f(x,t) и траектории решения
EOF



