# -*- coding: UTF-8 -*-
import sys
path_SvF = "/home/sokol/D/SvF/"
sys.path.append("/home/sokol/D/SvF/SvFlib")
sys.path.append(path_SvF + "pyomo-everest/python-api")
sys.path.append(path_SvF + "pyomo-everest/ssop")
import COMMON as SvF
SvF.path_SvF = path_SvF
SvF.tmpFileDir = SvF.path_SvF + 'TMP/'
from CVSets import *
from Table  import *
from Task   import *
from MakeModel import *
from GIS import *

SvF.Task = TaskClass()
Task = SvF.Task
SvF.mngF = 'MNG.mng'
SvF.CVNumOfIter = 1
SvF.useNaN = True
Table ( '../Phot-7shoX5.xlsx','curentTabl','ROWNUM AS t,I AS Q1,Ta AS T,WPD AS VPD,PhX2 AS P,PhX2 AS P,Dat,NN,PRel,ERel' )
Q1 = Set('Q1',SvF.curentTabl.dat('Q1')[:].min(),SvF.curentTabl.dat('Q1')[:].max(),-50,'','Q1')
T = Set('T',SvF.curentTabl.dat('T')[:].min(),SvF.curentTabl.dat('T')[:].max(),-50,'','T')
P = smbFun('P',[Q1,T], SymbolInteg=False)
def fP(Q1,T) : return P.F([Q1,T])
c = Tensor('c',[210])
def fc(i) : return c.F([i])
def P_smbF00(Args) :
   Q1 = Args[0]
   T = Args[1]
   return  ( fc(0)+fc(1)*T+fc(2)*Q1+fc(3)*T**2+fc(4)*Q1*T+fc(5)*Q1**2+fc(6)*T**3+fc(7)*Q1*T**2+fc(8)*Q1**2*T+fc(9)*Q1**3+fc(10)*T**4+fc(11)*Q1*T**3+fc(12)*Q1**2*T**2+fc(13)*Q1**3*T+fc(14)*Q1**4+fc(15)*T**5+fc(16)*Q1*T**4+fc(17)*Q1**2*T**3+fc(18)*Q1**3*T**2+fc(19)*Q1**4*T+fc(20)*Q1**5+fc(21)*T**6+fc(22)*Q1*T**5+fc(23)*Q1**2*T**4+fc(24)*Q1**3*T**3+fc(25)*Q1**4*T**2+fc(26)*Q1**5*T+fc(27)*Q1**6+fc(28)*T**7+fc(29)*Q1*T**6+fc(30)*Q1**2*T**5+fc(31)*Q1**3*T**4+fc(32)*Q1**4*T**3+fc(33)*Q1**5*T**2+fc(34)*Q1**6*T+fc(35)*Q1**7+fc(36)*T**8+fc(37)*Q1*T**7+fc(38)*Q1**2*T**6+fc(39)*Q1**3*T**5+fc(40)*Q1**4*T**4+fc(41)*Q1**5*T**3+fc(42)*Q1**6*T**2+fc(43)*Q1**7*T+fc(44)*Q1**8+fc(45)*T**9+fc(46)*Q1*T**8+fc(47)*Q1**2*T**7+fc(48)*Q1**3*T**6+fc(49)*Q1**4*T**5+fc(50)*Q1**5*T**4+fc(51)*Q1**6*T**3+fc(52)*Q1**7*T**2+fc(53)*Q1**8*T+fc(54)*Q1**9+fc(55)*T**10+fc(56)*Q1*T**9+fc(57)*Q1**2*T**8+fc(58)*Q1**3*T**7+fc(59)*Q1**4*T**6+fc(60)*Q1**5*T**5+fc(61)*Q1**6*T**4+fc(62)*Q1**7*T**3+fc(63)*Q1**8*T**2+fc(64)*Q1**9*T+fc(65)*Q1**10+fc(66)*T**11+fc(67)*Q1*T**10+fc(68)*Q1**2*T**9+fc(69)*Q1**3*T**8+fc(70)*Q1**4*T**7+fc(71)*Q1**5*T**6+fc(72)*Q1**6*T**5+fc(73)*Q1**7*T**4+fc(74)*Q1**8*T**3+fc(75)*Q1**9*T**2+fc(76)*Q1**10*T+fc(77)*Q1**11+fc(78)*T**12+fc(79)*Q1*T**11+fc(80)*Q1**2*T**10+fc(81)*Q1**3*T**9+fc(82)*Q1**4*T**8+fc(83)*Q1**5*T**7+fc(84)*Q1**6*T**6+fc(85)*Q1**7*T**5+fc(86)*Q1**8*T**4+fc(87)*Q1**9*T**3+fc(88)*Q1**10*T**2+fc(89)*Q1**11*T+fc(90)*Q1**12+fc(91)*T**13+fc(92)*Q1*T**12+fc(93)*Q1**2*T**11+fc(94)*Q1**3*T**10+fc(95)*Q1**4*T**9+fc(96)*Q1**5*T**8+fc(97)*Q1**6*T**7+fc(98)*Q1**7*T**6+fc(99)*Q1**8*T**5+fc(100)*Q1**9*T**4+fc(101)*Q1**10*T**3+fc(102)*Q1**11*T**2+fc(103)*Q1**12*T+fc(104)*Q1**13+fc(105)*T**14+fc(106)*Q1*T**13+fc(107)*Q1**2*T**12+fc(108)*Q1**3*T**11+fc(109)*Q1**4*T**10+fc(110)*Q1**5*T**9+fc(111)*Q1**6*T**8+fc(112)*Q1**7*T**7+fc(113)*Q1**8*T**6+fc(114)*Q1**9*T**5+fc(115)*Q1**10*T**4+fc(116)*Q1**11*T**3+fc(117)*Q1**12*T**2+fc(118)*Q1**13*T+fc(119)*Q1**14+fc(120)*T**15+fc(121)*Q1*T**14+fc(122)*Q1**2*T**13+fc(123)*Q1**3*T**12+fc(124)*Q1**4*T**11+fc(125)*Q1**5*T**10+fc(126)*Q1**6*T**9+fc(127)*Q1**7*T**8+fc(128)*Q1**8*T**7+fc(129)*Q1**9*T**6+fc(130)*Q1**10*T**5+fc(131)*Q1**11*T**4+fc(132)*Q1**12*T**3+fc(133)*Q1**13*T**2+fc(134)*Q1**14*T+fc(135)*Q1**15+fc(136)*T**16+fc(137)*Q1*T**15+fc(138)*Q1**2*T**14+fc(139)*Q1**3*T**13+fc(140)*Q1**4*T**12+fc(141)*Q1**5*T**11+fc(142)*Q1**6*T**10+fc(143)*Q1**7*T**9+fc(144)*Q1**8*T**8+fc(145)*Q1**9*T**7+fc(146)*Q1**10*T**6+fc(147)*Q1**11*T**5+fc(148)*Q1**12*T**4+fc(149)*Q1**13*T**3+fc(150)*Q1**14*T**2+fc(151)*Q1**15*T+fc(152)*Q1**16+fc(153)*T**17+fc(154)*Q1*T**16+fc(155)*Q1**2*T**15+fc(156)*Q1**3*T**14+fc(157)*Q1**4*T**13+fc(158)*Q1**5*T**12+fc(159)*Q1**6*T**11+fc(160)*Q1**7*T**10+fc(161)*Q1**8*T**9+fc(162)*Q1**9*T**8+fc(163)*Q1**10*T**7+fc(164)*Q1**11*T**6+fc(165)*Q1**12*T**5+fc(166)*Q1**13*T**4+fc(167)*Q1**14*T**3+fc(168)*Q1**15*T**2+fc(169)*Q1**16*T+fc(170)*Q1**17+fc(171)*T**18+fc(172)*Q1*T**17+fc(173)*Q1**2*T**16+fc(174)*Q1**3*T**15+fc(175)*Q1**4*T**14+fc(176)*Q1**5*T**13+fc(177)*Q1**6*T**12+fc(178)*Q1**7*T**11+fc(179)*Q1**8*T**10+fc(180)*Q1**9*T**9+fc(181)*Q1**10*T**8+fc(182)*Q1**11*T**7+fc(183)*Q1**12*T**6+fc(184)*Q1**13*T**5+fc(185)*Q1**14*T**4+fc(186)*Q1**15*T**3+fc(187)*Q1**16*T**2+fc(188)*Q1**17*T+fc(189)*Q1**18+fc(190)*T**19+fc(191)*Q1*T**18+fc(192)*Q1**2*T**17+fc(193)*Q1**3*T**16+fc(194)*Q1**4*T**15+fc(195)*Q1**5*T**14+fc(196)*Q1**6*T**13+fc(197)*Q1**7*T**12+fc(198)*Q1**8*T**11+fc(199)*Q1**9*T**10+fc(200)*Q1**10*T**9+fc(201)*Q1**11*T**8+fc(202)*Q1**12*T**7+fc(203)*Q1**13*T**6+fc(204)*Q1**14*T**5+fc(205)*Q1**15*T**4+fc(206)*Q1**16*T**3+fc(207)*Q1**17*T**2+fc(208)*Q1**18*T+fc(209)*Q1**19 ) 
P.smbF = P_smbF00
def P_Hessian00(Args) :
   Q1 = Args[0]
   T = Args[1]
   return 2*(171*Q1**17*fc(209) + 153*Q1**16*T*fc(208) + 153*Q1**16*fc(189) + 136*Q1**15*T**2*fc(207) + 136*Q1**15*T*fc(188) + 136*Q1**15*fc(170) + 120*Q1**14*T**3*fc(206) + 120*Q1**14*T**2*fc(187) + 120*Q1**14*T*fc(169) + 120*Q1**14*fc(152) + 105*Q1**13*T**4*fc(205) + 105*Q1**13*T**3*fc(186) + 105*Q1**13*T**2*fc(168) + 105*Q1**13*T*fc(151) + 105*Q1**13*fc(135) + 91*Q1**12*T**5*fc(204) + 91*Q1**12*T**4*fc(185) + 91*Q1**12*T**3*fc(167) + 91*Q1**12*T**2*fc(150) + 91*Q1**12*T*fc(134) + 91*Q1**12*fc(119) + 78*Q1**11*T**6*fc(203) + 78*Q1**11*T**5*fc(184) + 78*Q1**11*T**4*fc(166) + 78*Q1**11*T**3*fc(149) + 78*Q1**11*T**2*fc(133) + 78*Q1**11*T*fc(118) + 78*Q1**11*fc(104) + 66*Q1**10*T**7*fc(202) + 66*Q1**10*T**6*fc(183) + 66*Q1**10*T**5*fc(165) + 66*Q1**10*T**4*fc(148) + 66*Q1**10*T**3*fc(132) + 66*Q1**10*T**2*fc(117) + 66*Q1**10*T*fc(103) + 66*Q1**10*fc(90) + 55*Q1**9*T**8*fc(201) + 55*Q1**9*T**7*fc(182) + 55*Q1**9*T**6*fc(164) + 55*Q1**9*T**5*fc(147) + 55*Q1**9*T**4*fc(131) + 55*Q1**9*T**3*fc(116) + 55*Q1**9*T**2*fc(102) + 55*Q1**9*T*fc(89) + 55*Q1**9*fc(77) + 45*Q1**8*T**9*fc(200) + 45*Q1**8*T**8*fc(181) + 45*Q1**8*T**7*fc(163) + 45*Q1**8*T**6*fc(146) + 45*Q1**8*T**5*fc(130) + 45*Q1**8*T**4*fc(115) + 45*Q1**8*T**3*fc(101) + 45*Q1**8*T**2*fc(88) + 45*Q1**8*T*fc(76) + 45*Q1**8*fc(65) + 36*Q1**7*T**10*fc(199) + 36*Q1**7*T**9*fc(180) + 36*Q1**7*T**8*fc(162) + 36*Q1**7*T**7*fc(145) + 36*Q1**7*T**6*fc(129) + 36*Q1**7*T**5*fc(114) + 36*Q1**7*T**4*fc(100) + 36*Q1**7*T**3*fc(87) + 36*Q1**7*T**2*fc(75) + 36*Q1**7*T*fc(64) + 36*Q1**7*fc(54) + 28*Q1**6*T**11*fc(198) + 28*Q1**6*T**10*fc(179) + 28*Q1**6*T**9*fc(161) + 28*Q1**6*T**8*fc(144) + 28*Q1**6*T**7*fc(128) + 28*Q1**6*T**6*fc(113) + 28*Q1**6*T**5*fc(99) + 28*Q1**6*T**4*fc(86) + 28*Q1**6*T**3*fc(74) + 28*Q1**6*T**2*fc(63) + 28*Q1**6*T*fc(53) + 28*Q1**6*fc(44) + 21*Q1**5*T**12*fc(197) + 21*Q1**5*T**11*fc(178) + 21*Q1**5*T**10*fc(160) + 21*Q1**5*T**9*fc(143) + 21*Q1**5*T**8*fc(127) + 21*Q1**5*T**7*fc(112) + 21*Q1**5*T**6*fc(98) + 21*Q1**5*T**5*fc(85) + 21*Q1**5*T**4*fc(73) + 21*Q1**5*T**3*fc(62) + 21*Q1**5*T**2*fc(52) + 21*Q1**5*T*fc(43) + 21*Q1**5*fc(35) + 15*Q1**4*T**13*fc(196) + 15*Q1**4*T**12*fc(177) + 15*Q1**4*T**11*fc(159) + 15*Q1**4*T**10*fc(142) + 15*Q1**4*T**9*fc(126) + 15*Q1**4*T**8*fc(111) + 15*Q1**4*T**7*fc(97) + 15*Q1**4*T**6*fc(84) + 15*Q1**4*T**5*fc(72) + 15*Q1**4*T**4*fc(61) + 15*Q1**4*T**3*fc(51) + 15*Q1**4*T**2*fc(42) + 15*Q1**4*T*fc(34) + 15*Q1**4*fc(27) + 10*Q1**3*T**14*fc(195) + 10*Q1**3*T**13*fc(176) + 10*Q1**3*T**12*fc(158) + 10*Q1**3*T**11*fc(141) + 10*Q1**3*T**10*fc(125) + 10*Q1**3*T**9*fc(110) + 10*Q1**3*T**8*fc(96) + 10*Q1**3*T**7*fc(83) + 10*Q1**3*T**6*fc(71) + 10*Q1**3*T**5*fc(60) + 10*Q1**3*T**4*fc(50) + 10*Q1**3*T**3*fc(41) + 10*Q1**3*T**2*fc(33) + 10*Q1**3*T*fc(26) + 10*Q1**3*fc(20) + 6*Q1**2*T**15*fc(194) + 6*Q1**2*T**14*fc(175) + 6*Q1**2*T**13*fc(157) + 6*Q1**2*T**12*fc(140) + 6*Q1**2*T**11*fc(124) + 6*Q1**2*T**10*fc(109) + 6*Q1**2*T**9*fc(95) + 6*Q1**2*T**8*fc(82) + 6*Q1**2*T**7*fc(70) + 6*Q1**2*T**6*fc(59) + 6*Q1**2*T**5*fc(49) + 6*Q1**2*T**4*fc(40) + 6*Q1**2*T**3*fc(32) + 6*Q1**2*T**2*fc(25) + 6*Q1**2*T*fc(19) + 6*Q1**2*fc(14) + 3*Q1*T**16*fc(193) + 3*Q1*T**15*fc(174) + 3*Q1*T**14*fc(156) + 3*Q1*T**13*fc(139) + 3*Q1*T**12*fc(123) + 3*Q1*T**11*fc(108) + 3*Q1*T**10*fc(94) + 3*Q1*T**9*fc(81) + 3*Q1*T**8*fc(69) + 3*Q1*T**7*fc(58) + 3*Q1*T**6*fc(48) + 3*Q1*T**5*fc(39) + 3*Q1*T**4*fc(31) + 3*Q1*T**3*fc(24) + 3*Q1*T**2*fc(18) + 3*Q1*T*fc(13) + 3*Q1*fc(9) + T**17*fc(192) + T**16*fc(173) + T**15*fc(155) + T**14*fc(138) + T**13*fc(122) + T**12*fc(107) + T**11*fc(93) + T**10*fc(80) + T**9*fc(68) + T**8*fc(57) + T**7*fc(47) + T**6*fc(38) + T**5*fc(30) + T**4*fc(23) + T**3*fc(17) + T**2*fc(12) + T*fc(8) + fc(5)) 
P.Hessian[0][0] = P_Hessian00
def P_Hessian01(Args) :
   Q1 = Args[0]
   T = Args[1]
   return 18*Q1**17*fc(208) + 34*Q1**16*T*fc(207) + 17*Q1**16*fc(188) + 48*Q1**15*T**2*fc(206) + 32*Q1**15*T*fc(187) + 16*Q1**15*fc(169) + 60*Q1**14*T**3*fc(205) + 45*Q1**14*T**2*fc(186) + 30*Q1**14*T*fc(168) + 15*Q1**14*fc(151) + 70*Q1**13*T**4*fc(204) + 56*Q1**13*T**3*fc(185) + 42*Q1**13*T**2*fc(167) + 28*Q1**13*T*fc(150) + 14*Q1**13*fc(134) + 78*Q1**12*T**5*fc(203) + 65*Q1**12*T**4*fc(184) + 52*Q1**12*T**3*fc(166) + 39*Q1**12*T**2*fc(149) + 26*Q1**12*T*fc(133) + 13*Q1**12*fc(118) + 84*Q1**11*T**6*fc(202) + 72*Q1**11*T**5*fc(183) + 60*Q1**11*T**4*fc(165) + 48*Q1**11*T**3*fc(148) + 36*Q1**11*T**2*fc(132) + 24*Q1**11*T*fc(117) + 12*Q1**11*fc(103) + 88*Q1**10*T**7*fc(201) + 77*Q1**10*T**6*fc(182) + 66*Q1**10*T**5*fc(164) + 55*Q1**10*T**4*fc(147) + 44*Q1**10*T**3*fc(131) + 33*Q1**10*T**2*fc(116) + 22*Q1**10*T*fc(102) + 11*Q1**10*fc(89) + 90*Q1**9*T**8*fc(200) + 80*Q1**9*T**7*fc(181) + 70*Q1**9*T**6*fc(163) + 60*Q1**9*T**5*fc(146) + 50*Q1**9*T**4*fc(130) + 40*Q1**9*T**3*fc(115) + 30*Q1**9*T**2*fc(101) + 20*Q1**9*T*fc(88) + 10*Q1**9*fc(76) + 90*Q1**8*T**9*fc(199) + 81*Q1**8*T**8*fc(180) + 72*Q1**8*T**7*fc(162) + 63*Q1**8*T**6*fc(145) + 54*Q1**8*T**5*fc(129) + 45*Q1**8*T**4*fc(114) + 36*Q1**8*T**3*fc(100) + 27*Q1**8*T**2*fc(87) + 18*Q1**8*T*fc(75) + 9*Q1**8*fc(64) + 88*Q1**7*T**10*fc(198) + 80*Q1**7*T**9*fc(179) + 72*Q1**7*T**8*fc(161) + 64*Q1**7*T**7*fc(144) + 56*Q1**7*T**6*fc(128) + 48*Q1**7*T**5*fc(113) + 40*Q1**7*T**4*fc(99) + 32*Q1**7*T**3*fc(86) + 24*Q1**7*T**2*fc(74) + 16*Q1**7*T*fc(63) + 8*Q1**7*fc(53) + 84*Q1**6*T**11*fc(197) + 77*Q1**6*T**10*fc(178) + 70*Q1**6*T**9*fc(160) + 63*Q1**6*T**8*fc(143) + 56*Q1**6*T**7*fc(127) + 49*Q1**6*T**6*fc(112) + 42*Q1**6*T**5*fc(98) + 35*Q1**6*T**4*fc(85) + 28*Q1**6*T**3*fc(73) + 21*Q1**6*T**2*fc(62) + 14*Q1**6*T*fc(52) + 7*Q1**6*fc(43) + 78*Q1**5*T**12*fc(196) + 72*Q1**5*T**11*fc(177) + 66*Q1**5*T**10*fc(159) + 60*Q1**5*T**9*fc(142) + 54*Q1**5*T**8*fc(126) + 48*Q1**5*T**7*fc(111) + 42*Q1**5*T**6*fc(97) + 36*Q1**5*T**5*fc(84) + 30*Q1**5*T**4*fc(72) + 24*Q1**5*T**3*fc(61) + 18*Q1**5*T**2*fc(51) + 12*Q1**5*T*fc(42) + 6*Q1**5*fc(34) + 70*Q1**4*T**13*fc(195) + 65*Q1**4*T**12*fc(176) + 60*Q1**4*T**11*fc(158) + 55*Q1**4*T**10*fc(141) + 50*Q1**4*T**9*fc(125) + 45*Q1**4*T**8*fc(110) + 40*Q1**4*T**7*fc(96) + 35*Q1**4*T**6*fc(83) + 30*Q1**4*T**5*fc(71) + 25*Q1**4*T**4*fc(60) + 20*Q1**4*T**3*fc(50) + 15*Q1**4*T**2*fc(41) + 10*Q1**4*T*fc(33) + 5*Q1**4*fc(26) + 60*Q1**3*T**14*fc(194) + 56*Q1**3*T**13*fc(175) + 52*Q1**3*T**12*fc(157) + 48*Q1**3*T**11*fc(140) + 44*Q1**3*T**10*fc(124) + 40*Q1**3*T**9*fc(109) + 36*Q1**3*T**8*fc(95) + 32*Q1**3*T**7*fc(82) + 28*Q1**3*T**6*fc(70) + 24*Q1**3*T**5*fc(59) + 20*Q1**3*T**4*fc(49) + 16*Q1**3*T**3*fc(40) + 12*Q1**3*T**2*fc(32) + 8*Q1**3*T*fc(25) + 4*Q1**3*fc(19) + 48*Q1**2*T**15*fc(193) + 45*Q1**2*T**14*fc(174) + 42*Q1**2*T**13*fc(156) + 39*Q1**2*T**12*fc(139) + 36*Q1**2*T**11*fc(123) + 33*Q1**2*T**10*fc(108) + 30*Q1**2*T**9*fc(94) + 27*Q1**2*T**8*fc(81) + 24*Q1**2*T**7*fc(69) + 21*Q1**2*T**6*fc(58) + 18*Q1**2*T**5*fc(48) + 15*Q1**2*T**4*fc(39) + 12*Q1**2*T**3*fc(31) + 9*Q1**2*T**2*fc(24) + 6*Q1**2*T*fc(18) + 3*Q1**2*fc(13) + 34*Q1*T**16*fc(192) + 32*Q1*T**15*fc(173) + 30*Q1*T**14*fc(155) + 28*Q1*T**13*fc(138) + 26*Q1*T**12*fc(122) + 24*Q1*T**11*fc(107) + 22*Q1*T**10*fc(93) + 20*Q1*T**9*fc(80) + 18*Q1*T**8*fc(68) + 16*Q1*T**7*fc(57) + 14*Q1*T**6*fc(47) + 12*Q1*T**5*fc(38) + 10*Q1*T**4*fc(30) + 8*Q1*T**3*fc(23) + 6*Q1*T**2*fc(17) + 4*Q1*T*fc(12) + 2*Q1*fc(8) + 18*T**17*fc(191) + 17*T**16*fc(172) + 16*T**15*fc(154) + 15*T**14*fc(137) + 14*T**13*fc(121) + 13*T**12*fc(106) + 12*T**11*fc(92) + 11*T**10*fc(79) + 10*T**9*fc(67) + 9*T**8*fc(56) + 8*T**7*fc(46) + 7*T**6*fc(37) + 6*T**5*fc(29) + 5*T**4*fc(22) + 4*T**3*fc(16) + 3*T**2*fc(11) + 2*T*fc(7) + fc(4) 
P.Hessian[0][1] = P_Hessian01
def P_Hessian11(Args) :
   Q1 = Args[0]
   T = Args[1]
   return 2*(Q1**17*fc(207) + 3*Q1**16*T*fc(206) + Q1**16*fc(187) + 6*Q1**15*T**2*fc(205) + 3*Q1**15*T*fc(186) + Q1**15*fc(168) + 10*Q1**14*T**3*fc(204) + 6*Q1**14*T**2*fc(185) + 3*Q1**14*T*fc(167) + Q1**14*fc(150) + 15*Q1**13*T**4*fc(203) + 10*Q1**13*T**3*fc(184) + 6*Q1**13*T**2*fc(166) + 3*Q1**13*T*fc(149) + Q1**13*fc(133) + 21*Q1**12*T**5*fc(202) + 15*Q1**12*T**4*fc(183) + 10*Q1**12*T**3*fc(165) + 6*Q1**12*T**2*fc(148) + 3*Q1**12*T*fc(132) + Q1**12*fc(117) + 28*Q1**11*T**6*fc(201) + 21*Q1**11*T**5*fc(182) + 15*Q1**11*T**4*fc(164) + 10*Q1**11*T**3*fc(147) + 6*Q1**11*T**2*fc(131) + 3*Q1**11*T*fc(116) + Q1**11*fc(102) + 36*Q1**10*T**7*fc(200) + 28*Q1**10*T**6*fc(181) + 21*Q1**10*T**5*fc(163) + 15*Q1**10*T**4*fc(146) + 10*Q1**10*T**3*fc(130) + 6*Q1**10*T**2*fc(115) + 3*Q1**10*T*fc(101) + Q1**10*fc(88) + 45*Q1**9*T**8*fc(199) + 36*Q1**9*T**7*fc(180) + 28*Q1**9*T**6*fc(162) + 21*Q1**9*T**5*fc(145) + 15*Q1**9*T**4*fc(129) + 10*Q1**9*T**3*fc(114) + 6*Q1**9*T**2*fc(100) + 3*Q1**9*T*fc(87) + Q1**9*fc(75) + 55*Q1**8*T**9*fc(198) + 45*Q1**8*T**8*fc(179) + 36*Q1**8*T**7*fc(161) + 28*Q1**8*T**6*fc(144) + 21*Q1**8*T**5*fc(128) + 15*Q1**8*T**4*fc(113) + 10*Q1**8*T**3*fc(99) + 6*Q1**8*T**2*fc(86) + 3*Q1**8*T*fc(74) + Q1**8*fc(63) + 66*Q1**7*T**10*fc(197) + 55*Q1**7*T**9*fc(178) + 45*Q1**7*T**8*fc(160) + 36*Q1**7*T**7*fc(143) + 28*Q1**7*T**6*fc(127) + 21*Q1**7*T**5*fc(112) + 15*Q1**7*T**4*fc(98) + 10*Q1**7*T**3*fc(85) + 6*Q1**7*T**2*fc(73) + 3*Q1**7*T*fc(62) + Q1**7*fc(52) + 78*Q1**6*T**11*fc(196) + 66*Q1**6*T**10*fc(177) + 55*Q1**6*T**9*fc(159) + 45*Q1**6*T**8*fc(142) + 36*Q1**6*T**7*fc(126) + 28*Q1**6*T**6*fc(111) + 21*Q1**6*T**5*fc(97) + 15*Q1**6*T**4*fc(84) + 10*Q1**6*T**3*fc(72) + 6*Q1**6*T**2*fc(61) + 3*Q1**6*T*fc(51) + Q1**6*fc(42) + 91*Q1**5*T**12*fc(195) + 78*Q1**5*T**11*fc(176) + 66*Q1**5*T**10*fc(158) + 55*Q1**5*T**9*fc(141) + 45*Q1**5*T**8*fc(125) + 36*Q1**5*T**7*fc(110) + 28*Q1**5*T**6*fc(96) + 21*Q1**5*T**5*fc(83) + 15*Q1**5*T**4*fc(71) + 10*Q1**5*T**3*fc(60) + 6*Q1**5*T**2*fc(50) + 3*Q1**5*T*fc(41) + Q1**5*fc(33) + 105*Q1**4*T**13*fc(194) + 91*Q1**4*T**12*fc(175) + 78*Q1**4*T**11*fc(157) + 66*Q1**4*T**10*fc(140) + 55*Q1**4*T**9*fc(124) + 45*Q1**4*T**8*fc(109) + 36*Q1**4*T**7*fc(95) + 28*Q1**4*T**6*fc(82) + 21*Q1**4*T**5*fc(70) + 15*Q1**4*T**4*fc(59) + 10*Q1**4*T**3*fc(49) + 6*Q1**4*T**2*fc(40) + 3*Q1**4*T*fc(32) + Q1**4*fc(25) + 120*Q1**3*T**14*fc(193) + 105*Q1**3*T**13*fc(174) + 91*Q1**3*T**12*fc(156) + 78*Q1**3*T**11*fc(139) + 66*Q1**3*T**10*fc(123) + 55*Q1**3*T**9*fc(108) + 45*Q1**3*T**8*fc(94) + 36*Q1**3*T**7*fc(81) + 28*Q1**3*T**6*fc(69) + 21*Q1**3*T**5*fc(58) + 15*Q1**3*T**4*fc(48) + 10*Q1**3*T**3*fc(39) + 6*Q1**3*T**2*fc(31) + 3*Q1**3*T*fc(24) + Q1**3*fc(18) + 136*Q1**2*T**15*fc(192) + 120*Q1**2*T**14*fc(173) + 105*Q1**2*T**13*fc(155) + 91*Q1**2*T**12*fc(138) + 78*Q1**2*T**11*fc(122) + 66*Q1**2*T**10*fc(107) + 55*Q1**2*T**9*fc(93) + 45*Q1**2*T**8*fc(80) + 36*Q1**2*T**7*fc(68) + 28*Q1**2*T**6*fc(57) + 21*Q1**2*T**5*fc(47) + 15*Q1**2*T**4*fc(38) + 10*Q1**2*T**3*fc(30) + 6*Q1**2*T**2*fc(23) + 3*Q1**2*T*fc(17) + Q1**2*fc(12) + 153*Q1*T**16*fc(191) + 136*Q1*T**15*fc(172) + 120*Q1*T**14*fc(154) + 105*Q1*T**13*fc(137) + 91*Q1*T**12*fc(121) + 78*Q1*T**11*fc(106) + 66*Q1*T**10*fc(92) + 55*Q1*T**9*fc(79) + 45*Q1*T**8*fc(67) + 36*Q1*T**7*fc(56) + 28*Q1*T**6*fc(46) + 21*Q1*T**5*fc(37) + 15*Q1*T**4*fc(29) + 10*Q1*T**3*fc(22) + 6*Q1*T**2*fc(16) + 3*Q1*T*fc(11) + Q1*fc(7) + 171*T**17*fc(190) + 153*T**16*fc(171) + 136*T**15*fc(153) + 120*T**14*fc(136) + 105*T**13*fc(120) + 91*T**12*fc(105) + 78*T**11*fc(91) + 66*T**10*fc(78) + 55*T**9*fc(66) + 45*T**8*fc(55) + 36*T**7*fc(45) + 28*T**6*fc(36) + 21*T**5*fc(28) + 15*T**4*fc(21) + 10*T**3*fc(15) + 6*T**2*fc(10) + 3*T*fc(6) + fc(3)) 
P.Hessian[1][1] = P_Hessian11
P.ArgNormalition=True
SvF.RunMode = 'S&S'
import  numpy as np

from Lego import *
import pyomo.environ as py

def createGr ( Task, Penal ) :
    Funs = Task.Funs
    Gr = py.ConcreteModel()
    Task.Gr = Gr

    c.var = py.Var ( range (c.Sizes[0]),domain=Reals )
    Gr.c =  c.var

    P.var = py.Var ( P.A[0].NodS,P.A[1].NodS,domain=Reals )
    Gr.P =  P.var

    make_CV_Sets(0, SvF.CVstep)

    if len (SvF.CV_NoRs) > 0 :

       Gr.mu0 = py.Param ( range(SvF.CV_NoRs[0]), mutable=True, initialize = 1 )
    SvF.fun_with_mu.append(getFun('P'))
    if P.mu is None : P.mu = Gr.mu0
    P.ValidationSets = SvF.ValidationSets
    P.notTrainingSets = SvF.notTrainingSets
    P.TrainingSets = SvF.TrainingSets
 											# P.Complexity([Penal[0],Penal[1]])+P.MSD()
    def obj_expression(Gr):  
        return (
             P.Complexity([Penal[0],Penal[1]])+P.MSD()
        )  
    Gr.OBJ = py.Objective(rule=obj_expression)  

    return Gr

def print_res(Task, Penal, f__f):

    Gr = Task.Gr

    P = Task.Funs[0]

    OBJ_ = Gr.OBJ ()
    print (  '    OBJ =', OBJ_ )
    f__f.write ( '\n    OBJ ='+ str(OBJ_)+'\n')
    tmp = (P.Complexity([Penal[0],Penal[1]]))
    stmp = str(tmp)
    print (      '    ',int(tmp/OBJ_*1000)/10,'\tP.Complexity([Penal[0],Penal[1]]) =', stmp )
    f__f.write ( '    '+str(int(tmp/OBJ_*1000)/10)+'\tP.Complexity([Penal[0],Penal[1]]) ='+ stmp+'\n')
    tmp = (P.MSD())
    stmp = str(tmp)
    print (      '    ',int(tmp/OBJ_*1000)/10,'\tP.MSD() =', stmp )
    f__f.write ( '    '+str(int(tmp/OBJ_*1000)/10)+'\tP.MSD() ='+ stmp+'\n')

    return


SvF.Task.createGr  = createGr

SvF.Task.Delta = None

SvF.Task.DeltaVal = None

SvF.Task.defMSD = None

SvF.Task.defMSDVal = None

SvF.Task.print_res = print_res

from SvFstart62 import SvFstart19

SvFstart19 ( Task )
Task.Draw ('')