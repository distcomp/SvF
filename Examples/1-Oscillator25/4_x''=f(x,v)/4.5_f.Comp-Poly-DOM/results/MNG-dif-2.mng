CVNumOfIter  = 2			# максимальное кол-во итераций поиска весов регуляризации
#CVstep       = 21  			# кол-во подмножеств для процедуры кросс-валидации

TabX = Select * from  x(t).sol
TabV = Select v from  v(t).sol
SET:	V1 = [ -1,   1.8, 0.1  ]; Data = TabV.v;	# область значений (с запасом) функции v(t)
	X1 = [ -0.1, 2.3, 0.1  ]; Data = TabX.x; 	# область значений (с запасом) функции x(t)
DOMAIN: X1V1 = (X1,V1,0.4,0.4)

TabD = Select 	t, x  from  Spring5.dat      # считывание данных
SET:	t = [     ,    , 0.025]; Index='i'	# область определения функции x(t)
	X = [ -0.1, 2.3, 0.1  ]; Data = TabD.x  #Data = 'x'    # область значений (с запасом) функции x(t)
 	V = [ -1,   1.8, 0.1  ]; 		# область значений (с запасом) функции v(t)

VAR:    x ( t )   			# искомая функция
	v ( t )			 	# искомая функция
#	f ( X, V );   Type = SPWLi;  X, V \in X1V1    # вместо Degree = 6	сглаженная кусчно-линейная линия
	f ( X, V ) = Polynome(6);   Int_smbFxx_2 =False;  X, V ∈ X1V1    # вместо Degree = 6	сглаженная кусчно-линейная линия
f.ArgNormalition = False
#SvF.Epsilon =0.000001

EQ:     v == d/dt(x)			# дифференциальное ур-ие 1-ого порядка
EQ:	d2/dt2(x) ==  f(x,v)		# дифференциальное ур-ие 2-ого порядка

PENALTY: Px = 6.31679592
	 Pv = 8.73548975

CV:     CV_NumSets=21	# Unit = TabD.x; Unit = 'x';		# кол-во подмножеств для процедуры кросс-валидации

OBJ:    x.MSD() + (Px**4*f.INTxx() + 2*Px**2*Pv**2*f.INTxy() + Pv**4*f.INTyy()) / x.V.sigma2    # критерий выбора x(t),v(t) и f(x,t)

#OBJ:   x.MSD() + f.Complexity(Px, Pv)/x.V.sigma2    # критерий выбора x(t),v(t) и f(x,t)
#OBJ:  x.MSD() + f.Complexity(Penal[0], Penal[1])/x.V.sigma2   # критерий выбора x(t),v(t) и f(x,t)
  
Draw   x				# отображение функции x(t)

:Pl = Polyline (x, v, None, 'Trajectory')
Pl.Y[0]  = Pl.Y[1]			# прячем 0-ую точку
Pl.Y[-1] = Pl.Y[-2]			# прячем последнюю точку

Draw f Trajectory;LC:red		# отображение функции f(x,t) и траектории решения

EOF



